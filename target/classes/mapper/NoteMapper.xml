<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" 
"http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<!-- 命名空间保证元素的唯一性，避免发生冲突 -->
<!-- namespace指定接口DAO的位置 -->
<mapper namespace="com.cloud_note.dao.NoteDAO" >
    <!-- 类型写入完整包路径 ,插入的是实体类中的属性，下方id唯一-->
   <!-- id 与方法名对应 ,parameterType与形参类型对应，
   resultType与返回类型对应（此处填写其实体说在全路径）
   查询中#{name}表示传入的值 String小写也可以-->
   <!-- 返回类型 仍然是book类型，只是放在list中-->
    <!-- 依据bookid查询cn_note_id,cn_note_title -->
    <select id="findByBookId" 
    resultType="com.cloud_note.entity.Note">
    select cn_note_id,cn_note_title from cn_note 
              where cn_notebook_id=#{bookid} 
                   and cn_note_status_id=#{status} 
                 
                    
    </select>
  <!-- 依据bookid查询cn_note_id,cn_note_title -->  
    <select id="findByBookId2" 
    parameterType="string"
    resultType="Map">
    select cn_note_id,cn_note_title from cn_note 
              where cn_notebook_id=#{bookId} 
                   and cn_note_status_id='1'           
    </select>
    <!-- 依据noteid查询note-->
     <select id="findByNoteId" 
    parameterType="string"
    resultType="com.cloud_note.entity.Note">
    select * from cn_note 
              where cn_note_id=#{noteId} 
                   and cn_note_status_id='1'           
    </select>
    
    <!-- 依据noteid修改note-->
    <update id="updateNote" 
            parameterType="com.cloud_note.entity.Note">
    update cn_note set cn_note_title=#{cn_note_title},
                       cn_note_body=#{cn_note_body},
                       cn_note_last_modify_time=#{cn_note_last_modify_time}
                       where cn_note_id=#{cn_note_id}
    </update>
    
    <!-- 增加笔记（插入操作） -->
    <insert id="save" 
            parameterType="com.cloud_note.entity.Note">
            insert into cn_note(
                    cn_note_id,
                    cn_notebook_id,
                    cn_user_id,
                    cn_note_status_id,
                    cn_note_type_id,
                    cn_note_title,
                    cn_note_body,
                    cn_note_create_time,
                    cn_note_last_modify_time
                    )
                    values(
                    #{cn_note_id},
                    #{cn_notebook_id},
                    #{cn_user_id},
                    #{cn_note_status_id},
                    #{cn_note_type_id},
                    #{cn_note_title},
                    #{cn_note_body},
                    #{cn_note_create_time},
                    #{ cn_note_last_modify_time}
                    )
    </insert>
    
    <!-- 删除笔记，将其状态改为2 -->
  <update id="deleteNote" 
            parameterType="com.cloud_note.entity.Note">
    update cn_note set  cn_note_status_id=#{cn_note_status_id},
                       cn_note_last_modify_time=#{cn_note_last_modify_time}
                       where cn_note_id=#{cn_note_id}
    </update>
    
      <update id="updateType" 
            parameterType="com.cloud_note.entity.Note">
    update cn_note set  cn_note_type_id=#{cn_note_type_id}
                       where cn_note_id=#{cn_note_id}
    </update>
    
    
    
    
    <!-- 测试动态SQL包括if等,test中的值时是map中的key,#中括号
    中的字段也是map中的key,if括起来的语句满足条件生成，不满足不生成 -->
   <!-- trim加属性去掉逗号 -->
    <update id="updateNoteByMap"
    parameterType="map">
     update cn_note
        set 
       <trim suffixOverrides=",">
       <if test="title!=null">
         cn_note_title=#{title},
       </if>
       <if test="body!=null">
         cn_note_body=#{body},
        </if>
        
        <!-- 下方的if else语句 -->
        <choose>
            <when test="time!=null">
           cn_note_last_modify_time=#{time}
            </when>
          <otherwise>
            cn_note_last_modify_time=unix_timestamp()
          </otherwise>
        </choose>
         </trim> 
         where
           cn_note_id=#{noteId}
    </update>
    
    
    <!-- 复杂的批量删除 ,可将where换成标签-->
    <delete id="deleteNotes"
     parameterType="map">
     delete from cn_note 
     <where>
      <if test="status!=null">
        cn_note_status_id=#{status} and
      </if>
      cn_note_id in
      <foreach collection="ids" item="id"
      open="(" separator="," close=")">
        #{id}
        
      </foreach>
      </where>
     </delete>
     
     
     <delete id="deleteNote1"
     parameterType="string">
       delete from cn_note where
       cn_note_id = #{id}
     </delete>
</mapper>